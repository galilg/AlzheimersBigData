#---- Imports -----------------------------------------------------------------

from pyspark.mllib.regression import LabeledPoint
from pyspark.mllib.stat import Statistics
from pyspark.mllib.util import MLUtils
from pyspark.mllib.tree import DecisionTree, DecisionTreeModel

#---- Classes -----------------------------------------------------------------

class MachineLearning():

    def __init__(self, ad_reduced, nci_reduced, sc):
        self.ad_reduced = ad_reduced
        self.nci_reduced = nci_reduced
        self.sc = sc


    def practice(self):
        import pdb; pdb.set_trace()
        # take out the cluster ids and only leave the values
        # note, cluster ids of top 10 t-test values are no longer
        # in rank order, but they are consistently ordered between
        # the patients so doesn't matter for the purposes of the model

        ad_no_cluster_ids = self.ad_reduced \
                                .map(lambda x:
                                    (x[0],
                                    [x[1][i] for i in range (1, 20, 2)]))
                                    # range gets only odd numbered values
                                    # from 1 - 20 in values section of
                                    # (key, value) pair.

        nci_no_cluster_ids = self.nci_reduced \
                                .map(lambda x:
                                    (x[0],
                                    [x[1][i] for i in range (1, 20, 2)]))
                                    # range gets only odd numbered values
                                    # from 1 - 20 in values section of
                                    # (key, value) pair.

        # Get rdds with only the gene vals of each control group
        ad_gene_vals_only = ad_no_cluster_ids.map(lambda x: x[1])
        nci_gene_vals_only = nci_no_cluster_ids.map(lambda x: x[1])

        # Get rdds with both patient stats and gene vals for each control group
        ad_gene_and_life_stats = ad_no_cluster_ids \
                                   .map(lambda x:
                                        ([x[0][0], x[0][1], x[0][2]], x[1])) \
                                   .map(lambda x: x[0] + x[1])

        nci_gene_and_life_stats = nci_no_cluster_ids \
                                    .map(lambda x:
                                        ([x[0][0], x[0][1], x[0][2]], x[1])) \
                                    .map(lambda x: x[0] + x[1])

        # Transform rdds to Labeled Points for MLlib
        ad_gene_vals_only_labeled = ad_gene_vals_only \
                                   .map(lambda features:
                                               LabeledPoint(1, features))
                                   # AD gets a label of 1

        nci_gene_vals_only_labeled = nci_gene_vals_only \
                                    .map(lambda features:
                                               LabeledPoint(0, features))
                                   # NCI gets a label of 0

        ad_gene_and_life_stats_labeled = ad_gene_and_life_stats \
                                        .map(lambda features:
                                                    LabeledPoint(1, features))
                                   # AD gets a label of 1

        nci_gene_and_life_stats_labeled = nci_gene_and_life_stats \
                                        .map(lambda features:
                                                    LabeledPoint(0, features))
                                   # NCI gets a label of 0

        # Stack NCI and AD labels together

        all_groups_gene_vals_only = ad_gene_vals_only_labeled \
                                   .union(nci_gene_vals_only_labeled)

        all_groups_gene_and_life_stats = ad_gene_and_life_stats_labeled \
                                        .union(nci_gene_and_life_stats_labeled)


        # Create a decision tree for both Labeled point groups
        # With the life stats and without
        # IMPORTANT NOTE: Python 3.5 and Python 2.7 work differently on lambda
        # functions using multiple variables.
        # Where python 2.7 uses (lambda v, p: v != p)
        #       pythin 3.5 uses (lambda v_p: v_p[0] != v_p [1])

        (train_genes, test_genes) = all_groups_gene_vals_only \
                                                  .randomSplit([0.7, 0.3])
        model_genes = DecisionTree.trainClassifier(train_genes,
                                                   numClasses=2,
                                                   categoricalFeaturesInfo={},
                                                   impurity='gini',
                                                   maxDepth=5)

        predictions = model_genes.predict(test_genes.map(lambda x: x.features))
        labelsAndPredictions = test_genes.map(lambda lp: lp.label) \
                                         .zip(predictions)

        # Find all values where value and prediction don't match in test group
        # and divide by total number of vlaues in test group: yields error.
        testErr = labelsAndPredictions.filter(lambda v_p: v_p[0] != v_p[1]) \
                                      .count() / float(test_genes.count())

        print("Test error for gene model: ", testErr)

        print("Learned classification tree model: ")
        print(model_genes.toDebugString())
        model_genes.save(self.sc, "gene_only_model_AD_NCI")

        # Get true-negative, true-positive, false-negative, false-positives
        # for gene_only model

        genes_TN = labelsAndPredictions.filter(lambda v_p: v_p[0] == 0.0
                                                       and v_p[1] == 0.0)

        genes_TP = labelsAndPredictions.filter(lambda v_p: v_p[0] == 1.0
                                                       and v_p[1] == 1.0)


        genes_FP = labelsAndPredictions.filter(lambda v_p: v_p[0] == 0.0
                                                       and v_p[1] == 1.0)

        genes_FN = labelsAndPredictions.filter(lambda v_p: v_p[0] == 1.0
                                                       and v_p[1] == 0.0)



















